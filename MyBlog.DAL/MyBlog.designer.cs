#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyBlog.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MyBlog")]
	public partial class MyBlogDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void Insertblog(blog instance);
    partial void Updateblog(blog instance);
    partial void Deleteblog(blog instance);
    partial void InsertblogType(blogType instance);
    partial void UpdateblogType(blogType instance);
    partial void DeleteblogType(blogType instance);
    partial void Insertcomment(comment instance);
    partial void Updatecomment(comment instance);
    partial void Deletecomment(comment instance);
    partial void Insertphoto(photo instance);
    partial void Updatephoto(photo instance);
    partial void Deletephoto(photo instance);
    partial void Insertmessage(message instance);
    partial void Updatemessage(message instance);
    partial void Deletemessage(message instance);
    partial void Insertuser(user instance);
    partial void Updateuser(user instance);
    partial void Deleteuser(user instance);
    #endregion
		
		public MyBlogDataContext() : 
				base(global::MyBlog.DAL.Properties.Settings.Default.MyBlogConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public MyBlogDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyBlogDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyBlogDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyBlogDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<blog> blog
		{
			get
			{
				return this.GetTable<blog>();
			}
		}
		
		public System.Data.Linq.Table<blogType> blogType
		{
			get
			{
				return this.GetTable<blogType>();
			}
		}
		
		public System.Data.Linq.Table<comment> comment
		{
			get
			{
				return this.GetTable<comment>();
			}
		}
		
		public System.Data.Linq.Table<photo> photo
		{
			get
			{
				return this.GetTable<photo>();
			}
		}
		
		public System.Data.Linq.Table<message> message
		{
			get
			{
				return this.GetTable<message>();
			}
		}
		
		public System.Data.Linq.Table<user> user
		{
			get
			{
				return this.GetTable<user>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.blog")]
	public partial class blog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _blogId;
		
		private int _userId;
		
		private int _typeId;
		
		private string _blogTitle;
		
		private string _blogContent;
		
		private System.DateTime _blogTime;
		
		private EntitySet<comment> _comment;
		
		private EntityRef<blogType> _blogType;
		
		private EntityRef<user> _user;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnblogIdChanging(int value);
    partial void OnblogIdChanged();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OntypeIdChanging(int value);
    partial void OntypeIdChanged();
    partial void OnblogTitleChanging(string value);
    partial void OnblogTitleChanged();
    partial void OnblogContentChanging(string value);
    partial void OnblogContentChanged();
    partial void OnblogTimeChanging(System.DateTime value);
    partial void OnblogTimeChanged();
    #endregion
		
		public blog()
		{
			this._comment = new EntitySet<comment>(new Action<comment>(this.attach_comment), new Action<comment>(this.detach_comment));
			this._blogType = default(EntityRef<blogType>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_blogId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int blogId
		{
			get
			{
				return this._blogId;
			}
			set
			{
				if ((this._blogId != value))
				{
					this.OnblogIdChanging(value);
					this.SendPropertyChanging();
					this._blogId = value;
					this.SendPropertyChanged("blogId");
					this.OnblogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL")]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeId", DbType="Int NOT NULL")]
		public int typeId
		{
			get
			{
				return this._typeId;
			}
			set
			{
				if ((this._typeId != value))
				{
					if (this._blogType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeIdChanging(value);
					this.SendPropertyChanging();
					this._typeId = value;
					this.SendPropertyChanged("typeId");
					this.OntypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_blogTitle", DbType="VarChar(300) NOT NULL", CanBeNull=false)]
		public string blogTitle
		{
			get
			{
				return this._blogTitle;
			}
			set
			{
				if ((this._blogTitle != value))
				{
					this.OnblogTitleChanging(value);
					this.SendPropertyChanging();
					this._blogTitle = value;
					this.SendPropertyChanged("blogTitle");
					this.OnblogTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_blogContent", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string blogContent
		{
			get
			{
				return this._blogContent;
			}
			set
			{
				if ((this._blogContent != value))
				{
					this.OnblogContentChanging(value);
					this.SendPropertyChanging();
					this._blogContent = value;
					this.SendPropertyChanged("blogContent");
					this.OnblogContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_blogTime", DbType="DateTime NOT NULL")]
		public System.DateTime blogTime
		{
			get
			{
				return this._blogTime;
			}
			set
			{
				if ((this._blogTime != value))
				{
					this.OnblogTimeChanging(value);
					this.SendPropertyChanging();
					this._blogTime = value;
					this.SendPropertyChanged("blogTime");
					this.OnblogTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="blog_comment", Storage="_comment", ThisKey="blogId", OtherKey="blogId")]
		public EntitySet<comment> comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				this._comment.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="blogType_blog", Storage="_blogType", ThisKey="typeId", OtherKey="typeId", IsForeignKey=true)]
		public blogType blogType
		{
			get
			{
				return this._blogType.Entity;
			}
			set
			{
				blogType previousValue = this._blogType.Entity;
				if (((previousValue != value) 
							|| (this._blogType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._blogType.Entity = null;
						previousValue.blog.Remove(this);
					}
					this._blogType.Entity = value;
					if ((value != null))
					{
						value.blog.Add(this);
						this._typeId = value.typeId;
					}
					else
					{
						this._typeId = default(int);
					}
					this.SendPropertyChanged("blogType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_blog", Storage="_user", ThisKey="userId", OtherKey="userId", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.blog.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.blog.Add(this);
						this._userId = value.userId;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_comment(comment entity)
		{
			this.SendPropertyChanging();
			entity.blog = this;
		}
		
		private void detach_comment(comment entity)
		{
			this.SendPropertyChanging();
			entity.blog = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.blogType")]
	public partial class blogType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _typeId;
		
		private string _typeName;
		
		private string _typeInfo;
		
		private EntitySet<blog> _blog;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntypeIdChanging(int value);
    partial void OntypeIdChanged();
    partial void OntypeNameChanging(string value);
    partial void OntypeNameChanged();
    partial void OntypeInfoChanging(string value);
    partial void OntypeInfoChanged();
    #endregion
		
		public blogType()
		{
			this._blog = new EntitySet<blog>(new Action<blog>(this.attach_blog), new Action<blog>(this.detach_blog));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int typeId
		{
			get
			{
				return this._typeId;
			}
			set
			{
				if ((this._typeId != value))
				{
					this.OntypeIdChanging(value);
					this.SendPropertyChanging();
					this._typeId = value;
					this.SendPropertyChanged("typeId");
					this.OntypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeName", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string typeName
		{
			get
			{
				return this._typeName;
			}
			set
			{
				if ((this._typeName != value))
				{
					this.OntypeNameChanging(value);
					this.SendPropertyChanging();
					this._typeName = value;
					this.SendPropertyChanged("typeName");
					this.OntypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeInfo", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string typeInfo
		{
			get
			{
				return this._typeInfo;
			}
			set
			{
				if ((this._typeInfo != value))
				{
					this.OntypeInfoChanging(value);
					this.SendPropertyChanging();
					this._typeInfo = value;
					this.SendPropertyChanged("typeInfo");
					this.OntypeInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="blogType_blog", Storage="_blog", ThisKey="typeId", OtherKey="typeId")]
		public EntitySet<blog> blog
		{
			get
			{
				return this._blog;
			}
			set
			{
				this._blog.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_blog(blog entity)
		{
			this.SendPropertyChanging();
			entity.blogType = this;
		}
		
		private void detach_blog(blog entity)
		{
			this.SendPropertyChanging();
			entity.blogType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.comment")]
	public partial class comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _commentId;
		
		private int _blogId;
		
		private int _userId;
		
		private string _comContent;
		
		private System.DateTime _comTime;
		
		private EntityRef<blog> _blog;
		
		private EntityRef<user> _user;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncommentIdChanging(int value);
    partial void OncommentIdChanged();
    partial void OnblogIdChanging(int value);
    partial void OnblogIdChanged();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OncomContentChanging(string value);
    partial void OncomContentChanged();
    partial void OncomTimeChanging(System.DateTime value);
    partial void OncomTimeChanged();
    #endregion
		
		public comment()
		{
			this._blog = default(EntityRef<blog>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_commentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int commentId
		{
			get
			{
				return this._commentId;
			}
			set
			{
				if ((this._commentId != value))
				{
					this.OncommentIdChanging(value);
					this.SendPropertyChanging();
					this._commentId = value;
					this.SendPropertyChanged("commentId");
					this.OncommentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_blogId", DbType="Int NOT NULL")]
		public int blogId
		{
			get
			{
				return this._blogId;
			}
			set
			{
				if ((this._blogId != value))
				{
					if (this._blog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnblogIdChanging(value);
					this.SendPropertyChanging();
					this._blogId = value;
					this.SendPropertyChanged("blogId");
					this.OnblogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL")]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comContent", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string comContent
		{
			get
			{
				return this._comContent;
			}
			set
			{
				if ((this._comContent != value))
				{
					this.OncomContentChanging(value);
					this.SendPropertyChanging();
					this._comContent = value;
					this.SendPropertyChanged("comContent");
					this.OncomContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comTime", DbType="DateTime NOT NULL")]
		public System.DateTime comTime
		{
			get
			{
				return this._comTime;
			}
			set
			{
				if ((this._comTime != value))
				{
					this.OncomTimeChanging(value);
					this.SendPropertyChanging();
					this._comTime = value;
					this.SendPropertyChanged("comTime");
					this.OncomTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="blog_comment", Storage="_blog", ThisKey="blogId", OtherKey="blogId", IsForeignKey=true)]
		public blog blog
		{
			get
			{
				return this._blog.Entity;
			}
			set
			{
				blog previousValue = this._blog.Entity;
				if (((previousValue != value) 
							|| (this._blog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._blog.Entity = null;
						previousValue.comment.Remove(this);
					}
					this._blog.Entity = value;
					if ((value != null))
					{
						value.comment.Add(this);
						this._blogId = value.blogId;
					}
					else
					{
						this._blogId = default(int);
					}
					this.SendPropertyChanged("blog");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_comment", Storage="_user", ThisKey="userId", OtherKey="userId", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.comment.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.comment.Add(this);
						this._userId = value.userId;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.photo")]
	public partial class photo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _photoId;
		
		private int _userId;
		
		private string _photoName;
		
		private string _photoUrl;
		
		private System.DateTime _photoTime;
		
		private EntityRef<user> _user;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnphotoIdChanging(int value);
    partial void OnphotoIdChanged();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnphotoNameChanging(string value);
    partial void OnphotoNameChanged();
    partial void OnphotoUrlChanging(string value);
    partial void OnphotoUrlChanged();
    partial void OnphotoTimeChanging(System.DateTime value);
    partial void OnphotoTimeChanged();
    #endregion
		
		public photo()
		{
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_photoId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int photoId
		{
			get
			{
				return this._photoId;
			}
			set
			{
				if ((this._photoId != value))
				{
					this.OnphotoIdChanging(value);
					this.SendPropertyChanging();
					this._photoId = value;
					this.SendPropertyChanged("photoId");
					this.OnphotoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL")]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_photoName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string photoName
		{
			get
			{
				return this._photoName;
			}
			set
			{
				if ((this._photoName != value))
				{
					this.OnphotoNameChanging(value);
					this.SendPropertyChanging();
					this._photoName = value;
					this.SendPropertyChanged("photoName");
					this.OnphotoNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_photoUrl", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
		public string photoUrl
		{
			get
			{
				return this._photoUrl;
			}
			set
			{
				if ((this._photoUrl != value))
				{
					this.OnphotoUrlChanging(value);
					this.SendPropertyChanging();
					this._photoUrl = value;
					this.SendPropertyChanged("photoUrl");
					this.OnphotoUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_photoTime", DbType="DateTime NOT NULL")]
		public System.DateTime photoTime
		{
			get
			{
				return this._photoTime;
			}
			set
			{
				if ((this._photoTime != value))
				{
					this.OnphotoTimeChanging(value);
					this.SendPropertyChanging();
					this._photoTime = value;
					this.SendPropertyChanged("photoTime");
					this.OnphotoTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_photo", Storage="_user", ThisKey="userId", OtherKey="userId", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.photo.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.photo.Add(this);
						this._userId = value.userId;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.message")]
	public partial class message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _messageId;
		
		private int _authorId;
		
		private int _userId;
		
		private string _messageContent;
		
		private System.DateTime _messageTime;
		
		private EntityRef<user> _user;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmessageIdChanging(int value);
    partial void OnmessageIdChanged();
    partial void OnauthorIdChanging(int value);
    partial void OnauthorIdChanged();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnmessageContentChanging(string value);
    partial void OnmessageContentChanged();
    partial void OnmessageTimeChanging(System.DateTime value);
    partial void OnmessageTimeChanged();
    #endregion
		
		public message()
		{
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_messageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int messageId
		{
			get
			{
				return this._messageId;
			}
			set
			{
				if ((this._messageId != value))
				{
					this.OnmessageIdChanging(value);
					this.SendPropertyChanging();
					this._messageId = value;
					this.SendPropertyChanged("messageId");
					this.OnmessageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_authorId", DbType="Int NOT NULL")]
		public int authorId
		{
			get
			{
				return this._authorId;
			}
			set
			{
				if ((this._authorId != value))
				{
					this.OnauthorIdChanging(value);
					this.SendPropertyChanging();
					this._authorId = value;
					this.SendPropertyChanged("authorId");
					this.OnauthorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL")]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_messageContent", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string messageContent
		{
			get
			{
				return this._messageContent;
			}
			set
			{
				if ((this._messageContent != value))
				{
					this.OnmessageContentChanging(value);
					this.SendPropertyChanging();
					this._messageContent = value;
					this.SendPropertyChanged("messageContent");
					this.OnmessageContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_messageTime", DbType="DateTime NOT NULL")]
		public System.DateTime messageTime
		{
			get
			{
				return this._messageTime;
			}
			set
			{
				if ((this._messageTime != value))
				{
					this.OnmessageTimeChanging(value);
					this.SendPropertyChanging();
					this._messageTime = value;
					this.SendPropertyChanged("messageTime");
					this.OnmessageTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_message", Storage="_user", ThisKey="userId", OtherKey="userId", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.message.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.message.Add(this);
						this._userId = value.userId;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[user]")]
	public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userId;
		
		private string _username;
		
		private string _password;
		
		private string _tel;
		
		private string _email;
		
		private EntitySet<blog> _blog;
		
		private EntitySet<comment> _comment;
		
		private EntitySet<photo> _photo;
		
		private EntitySet<message> _message;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OntelChanging(string value);
    partial void OntelChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    #endregion
		
		public user()
		{
			this._blog = new EntitySet<blog>(new Action<blog>(this.attach_blog), new Action<blog>(this.detach_blog));
			this._comment = new EntitySet<comment>(new Action<comment>(this.attach_comment), new Action<comment>(this.detach_comment));
			this._photo = new EntitySet<photo>(new Action<photo>(this.attach_photo), new Action<photo>(this.detach_photo));
			this._message = new EntitySet<message>(new Action<message>(this.attach_message), new Action<message>(this.detach_message));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tel", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string tel
		{
			get
			{
				return this._tel;
			}
			set
			{
				if ((this._tel != value))
				{
					this.OntelChanging(value);
					this.SendPropertyChanging();
					this._tel = value;
					this.SendPropertyChanged("tel");
					this.OntelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_blog", Storage="_blog", ThisKey="userId", OtherKey="userId")]
		public EntitySet<blog> blog
		{
			get
			{
				return this._blog;
			}
			set
			{
				this._blog.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_comment", Storage="_comment", ThisKey="userId", OtherKey="userId")]
		public EntitySet<comment> comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				this._comment.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_photo", Storage="_photo", ThisKey="userId", OtherKey="userId")]
		public EntitySet<photo> photo
		{
			get
			{
				return this._photo;
			}
			set
			{
				this._photo.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_message", Storage="_message", ThisKey="userId", OtherKey="userId")]
		public EntitySet<message> message
		{
			get
			{
				return this._message;
			}
			set
			{
				this._message.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_blog(blog entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_blog(blog entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_comment(comment entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_comment(comment entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_photo(photo entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_photo(photo entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_message(message entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_message(message entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
	}
}
#pragma warning restore 1591
